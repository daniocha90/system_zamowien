#!/bin/bash

# =============================================
# INSTALATOR SYSTEMU ZAM√ìWIE≈É - Cyber Folks
# =============================================

set -e

# Kolory dla outputu
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funkcje pomocnicze
print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Zmienne konfiguracyjne
DOMAIN="zooleszcz.pl"
REMOTE_USER="zooleszc"
INSTALL_DIR="/home/${REMOTE_USER}/domains/${DOMAIN}/public_html/zamowienia"
BACKUP_DIR="/home/${REMOTE_USER}/domains/${DOMAIN}/backups"

echo ""
echo "============================================="
echo "üèóÔ∏è  INSTALATOR SYSTEMU ZAM√ìWIE≈É"
echo "   Cyber Folks + MySQL"
echo "============================================="
echo ""

# Sprawdzenie czy skrypt jest uruchomiony na Cyber Folks
check_environment() {
    print_status "Sprawdzanie ≈õrodowiska..."
    
    if [[ ! -d "/home/${REMOTE_USER}" ]]; then
        print_error "Nie znaleziono katalogu u≈ºytkownika Cyber Folks"
        print_error "Uruchom ten skrypt na serwerze Cyber Folks!"
        exit 1
    fi
    
    print_success "≈örodowisko Cyber Folks wykryte"
}

# Sprawdzenie zale≈ºno≈õci
check_dependencies() {
    print_status "Sprawdzanie zale≈ºno≈õci..."
    
    # Sprawd≈∫ Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js nie jest zainstalowany"
        print_status "Aktywuj Node.js przez panel Cyber Folks:"
        print_status "Panel ‚Üí Advanced ‚Üí Node.js Manager ‚Üí Wybierz wersjƒô 18+"
        exit 1
    fi
    
    # Sprawd≈∫ npm
    if ! command -v npm &> /dev/null; then
        print_error "npm nie jest dostƒôpny"
        exit 1
    fi
    
    print_success "Wszystkie zale≈ºno≈õci spe≈Çnione"
    print_status "Node.js version: $(node --version)"
    print_status "npm version: $(npm --version)"
}

# Tworzenie backupu istniejƒÖcej instalacji
create_backup() {
    if [[ -d "$INSTALL_DIR" ]]; then
        print_status "Tworzenie backupu istniejƒÖcej instalacji..."
        local backup_name="backup_zamowienia_$(date +%Y%m%d_%H%M%S)"
        local backup_path="$BACKUP_DIR/$backup_name"
        
        mkdir -p "$BACKUP_DIR"
        cp -r "$INSTALL_DIR" "$backup_path" 2>/dev/null || {
            print_warning "Nie uda≈Ço siƒô utworzyƒá pe≈Çnego backupu, tworzenie backupu wa≈ºnych plik√≥w..."
            mkdir -p "$backup_path"
            cp "$INSTALL_DIR/backend/.env" "$backup_path/" 2>/dev/null || true
            cp "$INSTALL_DIR/backend/package.json" "$backup_path/" 2>/dev/null || true
        }
        
        print_success "Backup utworzony: $backup_name"
    else
        print_status "Brak istniejƒÖcej instalacji - pomijam backup"
    fi
}

# Tworzenie struktury katalog√≥w
create_directories() {
    print_status "Tworzenie struktury katalog√≥w..."
    
    mkdir -p "$INSTALL_DIR"
    mkdir -p "$INSTALL_DIR/backend"
    mkdir -p "$INSTALL_DIR/frontend"
    mkdir -p "$INSTALL_DIR/logs"
    mkdir -p "$INSTALL_DIR/uploads"
    mkdir -p "$INSTALL_DIR/scripts"
    
    # Ustawienie praw dostƒôpu
    chmod 755 "$INSTALL_DIR/uploads" 2>/dev/null || true
    chmod 755 "$INSTALL_DIR/logs" 2>/dev/null || true
    
    print_success "Struktura katalog√≥w utworzona"
}

# Instalacja backendu
install_backend() {
    print_status "Instalacja backendu..."
    
    # Sprawd≈∫ czy pliki backendu istniejƒÖ
    if [[ ! -d "backend" ]]; then
        print_error "Katalog backend nie istnieje!"
        print_status "Upewnij siƒô ≈ºe wszystkie pliki sƒÖ w odpowiednich katalogach"
        exit 1
    fi
    
    # Kopiowanie plik√≥w backendu
    cp -r backend/* "$INSTALL_DIR/backend/" 2>/dev/null || {
        print_error "B≈ÇƒÖd kopiowania plik√≥w backendu"
        exit 1
    }
    
    cd "$INSTALL_DIR/backend"
    
    # Instalacja zale≈ºno≈õci
    print_status "Instalowanie zale≈ºno≈õci Node.js..."
    npm install --production --no-audit --no-fund
    
    if [[ $? -ne 0 ]]; then
        print_error "B≈ÇƒÖd instalacji zale≈ºno≈õci Node.js"
        exit 1
    fi
    
    # Konfiguracja .env je≈õli nie istnieje
    if [[ ! -f ".env" ]]; then
        print_warning "Plik .env nie istnieje - tworzenie z przyk≈Çadu"
        if [[ -f ".env.example" ]]; then
            cp .env.example .env
            print_status "Edytuj plik .env przed uruchomieniem aplikacji:"
            print_status "nano $INSTALL_DIR/backend/.env"
        else
            print_error "Brak pliku .env.example - musisz rƒôcznie utworzyƒá .env"
        fi
    fi
    
    print_success "Backend zainstalowany"
}

# Instalacja frontendu
install_frontend() {
    print_status "Instalacja frontendu..."
    
    # Sprawd≈∫ czy zbudowany frontend istnieje
    if [[ -d "frontend/dist" ]]; then
        cp -r frontend/dist/* "$INSTALL_DIR/frontend/" 2>/dev/null || {
            print_error "B≈ÇƒÖd kopiowania plik√≥w frontendu"
            exit 1
        }
        print_success "Frontend skopiowany"
    else
        print_warning "Brak zbudowanego frontendu w frontend/dist/"
        print_status "Aby zbudowaƒá frontend wykonaj:"
        print_status "1. cd frontend"
        print_status "2. npm install"
        print_status "3. npm run build"
        print_status "4. Skopiuj dist/ do $INSTALL_DIR/frontend/"
    fi
}

# Konfiguracja PM2
setup_pm2() {
    print_status "Konfiguracja PM2..."
    
    # Sprawd≈∫ czy PM2 jest zainstalowane
    if ! command -v pm2 &> /dev/null; then
        print_status "Instalowanie PM2..."
        npm install -g pm2
        
        if [[ $? -ne 0 ]]; then
            print_warning "Nie uda≈Ço siƒô zainstalowaƒá PM2 globalnie"
            print_status "Uruchom: npm install -g pm2"
            return 1
        fi
    fi
    
    # Uruchom aplikacjƒô z PM2
    cd "$INSTALL_DIR/backend"
    
    # Zatrzymij istniejƒÖcƒÖ instancjƒô je≈õli istnieje
    pm2 delete zamowienia-api 2>/dev/null || true
    
    # Uruchom nowƒÖ instancjƒô
    pm2 start server.js --name "zamowienia-api" --time
    
    if [[ $? -eq 0 ]]; then
        pm2 save 2>/dev/null || true
        print_success "Aplikacja uruchomiona z PM2"
    else
        print_warning "B≈ÇƒÖd uruchamiania z PM2 - uruchom rƒôcznie: node server.js"
        return 1
    fi
}

# Konfiguracja .htaccess dla Apache
setup_htaccess() {
    print_status "Konfiguracja .htaccess..."
    
    local htaccess_path="$INSTALL_DIR/backend/.htaccess"
    
    cat > "$htaccess_path" << 'EOF'
RewriteEngine On

# Serwowanie plik√≥w statycznych
RewriteCond %{REQUEST_FILENAME} -f [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^ - [L]

# API proxy do Node.js
RewriteRule ^api/(.*)$ http://localhost:5000/api/$1 [P,L]

# Frontend routing
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ /zamowienia/frontend/index.html [L]
EOF

    if [[ -f "$htaccess_path" ]]; then
        print_success ".htaccess skonfigurowany"
    else
        print_warning "Nie uda≈Ço siƒô utworzyƒá .htaccess"
    fi
}

# Testowanie instalacji
test_installation() {
    print_status "Testowanie instalacji..."
    
    # Daj czas na uruchomienie
    sleep 3
    
    # Sprawd≈∫ czy backend dzia≈Ça
    if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
        print_success "Backend dzia≈Ça poprawnie"
    else
        print_warning "Backend nie odpowiada - sprawd≈∫ logi: pm2 logs zamowienia-api"
    fi
    
    # Sprawd≈∫ czy pliki frontendu istniejƒÖ
    if [[ -f "$INSTALL_DIR/frontend/index.html" ]]; then
        print_success "Pliki frontendu znalezione"
    else
        print_warning "Brak plik√≥w frontendu - nale≈ºy je zbudowaƒá"
    fi
}

# Wy≈õwietl informacje po instalacji
show_post_install_info() {
    echo ""
    echo "============================================="
    echo "üéâ INSTALACJA ZAKO≈ÉCZONA POMY≈öLNIE!"
    echo "============================================="
    echo ""
    echo "üìã Adresy aplikacji:"
    echo "   Frontend: https://${DOMAIN}/zamowienia"
    echo "   Panel admina: https://${DOMAIN}/zamowienia/admin/dashboard"
    echo "   API Health: https://${DOMAIN}/zamowienia/api/health"
    echo ""
    echo "‚öôÔ∏è  Konfiguracja:"
    echo "   1. Edytuj plik: ${INSTALL_DIR}/backend/.env"
    echo "   2. Ustaw dane do MySQL w pliku .env"
    echo "   3. Utw√≥rz bazƒô danych przez phpMyAdmin"
    echo "   4. Importuj schema.sql do bazy danych"
    echo ""
    echo "üõ†Ô∏è  ZarzƒÖdzanie aplikacjƒÖ:"
    echo "   Logi: pm2 logs zamowienia-api"
    echo "   Status: pm2 status"
    echo "   Restart: pm2 restart zamowienia-api"
    echo "   Stop: pm2 stop zamowienia-api"
    echo ""
    echo "üîß Pozosta≈Çe kroki:"
    echo "   1. Aktywuj SSL w panelu Cyber Folks"
    echo "   2. Przetestuj formularz zam√≥wienia"
    echo "   3. Sprawd≈∫ czy e-maile sƒÖ wysy≈Çane"
    echo ""
    echo "üìû RozwiƒÖzywanie problem√≥w:"
    echo "   Sprawd≈∫ logi: pm2 logs zamowienia-api --lines 50"
    echo "============================================="
}

# G≈Ç√≥wna funkcja instalacyjna
main() {
    echo ""
    echo "Rozpoczynanie instalacji systemu zam√≥wie≈Ñ..."
    echo "Katalog instalacji: $INSTALL_DIR"
    echo ""
    
    # Potwierdzenie instalacji
    read -p "Czy chcesz kontynuowaƒá instalacjƒô? (t/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Tt]$ ]]; then
        print_error "Instalacja anulowana"
        exit 1
    fi
    
    # Kolejne kroki instalacji
    check_environment
    check_dependencies
    create_backup
    create_directories
    install_backend
    install_frontend
    setup_pm2
    setup_htaccess
    test_installation
    show_post_install_info
}

# Uruchom instalacjƒô
main "$@"
